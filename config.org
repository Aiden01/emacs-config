# -*- mode: org; coding: utf-8; -*-
#+TITLE: My Emacs configuration
#+AUTHOR: Aiden
#+STARTUP: indent

* Functions
#+BEGIN_SRC emacs-lisp
(defun aiden/reload ()
 "Reload configuration file"
 (interactive)
 (load-file "/home/aiden/.emacs.d/init.el"))
(defun aiden/open-config ()
 "Open configuration file"
 (interactive)
 (find-file "/home/aiden/.config/emacs/config.org"))
#+END_SRC
* Keybindings
** Find-File-In-Project
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x c") 'find-file-in-project)
#+END_SRC
** Reload config
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c r") 'aiden/reload)
#+END_SRC
** Open config
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c g") 'aiden/open-config)
#+END_SRC
* Settings
** Run on Save
#+BEGIN_SRC emacs-lisp
(use-package auto-shell-command
  :config
  (ascmd:add '("/**/*.*\.hs"       "brittany --write-mode=inplace $FILE")))
#+END_SRC
** Author
#+BEGIN_SRC emacs-lisp
(setq-default user-full-name "Aiden"
              user-mail-address "liangu@protonmail.com")
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-10"))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(use-package dashboard
  :ensure t
  :custom
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-footer nil)
  (dashboard-set-navigator nil)
  (dashboard-center-content t)
  :config
  (dashboard-setup-startup-hook))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(line-number-mode t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(toggle-scroll-bar -1)
(use-package doom-themes
  :if (display-graphic-p)
  :custom-face
  (font-lock-function ((t (:foreground "#e06c75"))))
  :custom
  (doom-vibrant-brighter-comments t)
  (doom-vibrant-brighter-modeline t)
  :config
  (doom-themes-org-config)
  (load-theme 'doom-vibrant t))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp

(use-package doom-modeline
  :if (display-graphic-p)
  :custom
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-version t)
  (doom-modeline-buffer-file-name-style 'file-name)
  :config
  (doom-modeline-mode))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

;; For haskell
(use-package flycheck-haskell
  :ensure t
  :init
  (add-hook 'haskell-mode-hook #'flycheck-haskell-setup))
#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :init
  (powerline-default-theme))
#+END_SRC
** Wakatime
#+BEGIN_SRC emacs-lisp
(use-package wakatime-mode
  :ensure t
  :custom
  (wakatime-cli-path "/home/aiden/.nix-profile/bin/wakatime")
  (wakatime-api-key "673d86e8-467c-4cea-80d7-00b6b5ff2d1c")
  :init
  (global-wakatime-mode))
#+END_SRC
** Discord presence
#+BEGIN_SRC emacs-lisp
(use-package elcord
  :ensure t
  :custom
  (elcord-use-major-mode-as-main-icon t)
  :init
  (elcord-mode))
#+END_SRC

** Nix
#+BEGIN_SRC emacs-lisp
(use-package nix-mode
 :ensure t
 :init
 (nix-mode))
#+END_SRC
** Programming
*** Lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :init
  (lsp-mode))
#+END_SRC
*** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure t
  :mode "'\\.hs\\'"
  :init
  (haskell-mode))
#+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
 :ensure t
 :mode "'\\.rs\\'"
 :init
 (rust-mode))
#+END_SRC
*** Ocaml
#+BEGIN_SRC emacs-lisp
(use-package tuareg
  :ensure t
  :init
  (tuareg-mode))
#+END_SRC
*** Idris
#+BEGIN_SRC emacs-lisp
(use-package idris-mode
  :ensure t
  :mode "'\\.idr'"
  :init
  (idris-mode))
#+END_SRC
